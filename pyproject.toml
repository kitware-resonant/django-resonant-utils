[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "django-resonant-utils"
description = "Django utilities for data management applications."
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
license-files = ["LICENSE"]
maintainers = [{ name = "Kitware, Inc.", email = "kitware@kitware.com" }]
keywords = [
  "django",
  "resonant",
  "kitware-resonant",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 5",
  "Framework :: Django :: 5.2",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
]
dependencies = [
  "django>=4.2",
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/kitware-resonant/django-resonant-utils"
"Bug Reports" = "https://github.com/kitware-resonant/django-resonant-utils/issues"

[project.optional-dependencies]
allauth = [
  "django-allauth",
]
rest_framework = [
  "djangorestframework",
]
minio_storage = [
  "django-minio-storage",
]
s3_storage = [
  "django-storages[s3]>=1.14",
]

[tool.hatch.build]
only-include = [
  "resonant_utils",
]

[tool.hatch.version]
source = "vcs"

[tool.mypy]
files = [
  "resonant_utils",
]
show_error_codes = true
strict = true
mypy_path = [
  "$MYPY_CONFIG_FILE_DIR/stubs",
]

[tool.ruff]
line-length = 100
target-version = "py310"
select = ["ALL"]
ignore = [
  # Incompatible with formatter
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q", # flake8-quotes
  "W191", # tab-indentation

  "A003", # Class attribute is shadowing a Python builtin
  "ANN", # flake8-annotations
  "ARG001", # Unused function argument
  "ARG002", # Unused method argument
  "D1", # Missing docstring
  "EM101", # Exception must not use a string literal, assign to variable first
  "EM102", # Exception must not use an f-string literal, assign to variable first
  "ERA001", # Found commented-out code
  "FIX", # flake8-fixme
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "TRY003", # Avoid specifying long messages outside the exception class

  # Try to fix upstream
  "RUF012", #  Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.per-file-ignores]
"**/migrations/**" = [
  "N806", # Variable in function should be lowercase
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
"**/management/commands/**" = [
  "INP001", # File is part of an implicit namespace package
]
"**/tests/**" = [
  "DJ007", # Do not use `__all__`
  "DJ008", # Model does not define `__str__` method
  "PLR0913", # Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "S", # flake8-bandit
  "SLF001", # Private member accessed
]

[tool.ruff.lint.flake8-self]
extend-ignore-names = ["_base_manager", "_default_manager",  "_meta"]

[tool.ruff.lint.isort]
# Sort by name, don't cluster "from" vs "import"
force-sort-within-sections = true
# Deferred annotations allows TCH rules to move more imports into TYPE_CHECKING blocks
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
